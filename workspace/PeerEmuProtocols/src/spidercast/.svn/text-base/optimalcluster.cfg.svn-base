CYCLON_VIEW              15
CYCLON_GOSSIP            5
VIC_VIEW                 15
VIC_GOSSIP               5
RT_GOSSIP                5

NODES                    1050
#NODES                   13790
#NODES                   60000
CYCLE                    1000
CYCLES                   1000


random.seed              1
simulation.endtime       CYCLE * CYCLES
network.size             NODES


debug.config full


################
# INITIALIZERS #
################
#include.init             topic_initializer, cd_cyclon, topology_cyclon, cd_vicinity, cd_routing
include.init              topic_initializer, optimaloverlay
init.topology_cyclon     peeremu.dynamics.WireKOut
{
  protocol               cyclon
  k                      CYCLON_VIEW
}


init.cd_cyclon           peeremu.edsim.CDScheduler
{
  protocol               cyclon
  randstart
}


init.cd_vicinity         peeremu.edsim.CDScheduler
{
  protocol               vicinity
  randstart
}

init.cd_routing          peeremu.edsim.CDScheduler
{
  protocol               routing
  randstart
}


init.topic_initializer   spidercast.quickcluster.NodeTopicsInitializer
{
	protocol               routing
	
	data_uniform           spidercast.workload.UniformTopicsGenerator
	{
	  NUM_TOPICS             100
	  minTopicsPerNode		 10
	  maxTopicsPerNode		 10
	}
	
	data_exp                     spidercast.workload.ExponentialTopicsGenerator
	{
	  NUM_TOPICS             1000
	  minTopicsPerNode		 1
	  maxTopicsPerNode		 100
	}
	
	data_zi                  spidercast.workload.ZipfTopicsGenerator
	{
	  NUM_TOPICS             1000
	  minTopicsPerNode		 1
	  maxTopicsPerNode		 100
	}
	
	data             spidercast.workload.SubscriptionsFileReader
	{
	  file					 randomsubset_1000.txt
	}
	
	data_facebook            spidercast.workload.SubscriptionsFileReader
	{
	  file					 facebook_traces.txt
	}
}

init.optimaloverlay      spidercast.quickcluster.OptimalRoutingTableInitializer
{
     protocol            routing
}
#############
# PROTOCOLS #
#############

#include.protocol         routing, cyclon, vicinity, trans, publishing
#include.protocol         cyclon, trans
include.protocol         routing, publishing, trans

protocol.cyclon          gossip.protocol.CyclonED
{
  descriptor             spidercast.quickcluster.DescriptorQC
  settings               gossip.protocol.CyclonSettings

  select                 gossip.comparator.AgeDescending
  duplicate              gossip.comparator.AgeAscending

  view                   CYCLON_VIEW
  gossip                 CYCLON_GOSSIP
  step                   CYCLE

  transport              trans
}


protocol.vicinity        spidercast.quickcluster.VicinityQC
{
  linkable               cyclon

  routing                routing

  descriptor             spidercast.quickcluster.DescriptorQC
  settings               spidercast.quickcluster.VicinitySettingsQC

  sendLinkableItems      true

  view                   VIC_VIEW
  gossip                 VIC_GOSSIP
  step                   CYCLE

  transport              trans
}


protocol.routing         spidercast.quickcluster.RoutingTableRingCast
{
  descriptor             spidercast.quickcluster.DescriptorQC
  K						 2
  R					 	 0
  settings               spidercast.quickcluster.VicinitySettingsQC
  step                   CYCLE
  transport              trans
  sendLinkableItems      false
  gossip                 RT_GOSSIP
}

protocol.routing_prio    spidercast.quickcluster.RoutingTablePriority
{
  descriptor             spidercast.quickcluster.DescriptorQC
  K						 3
  settings               spidercast.quickcluster.VicinitySettingsQC
  transport              trans
  sendLinkableItems      false
}

protocol.publishing      spidercast.quickcluster.DisseminationProtocol
{
  routing                routing
  F						 3
  settings               spidercast.quickcluster.VicinitySettingsQC
  step                   CYCLE
  transport              trans
  sendLinkableItems      false
}



protocol.trans           peeremu.transport.UniformRandomTransport
{
  mindelay               1
  maxdelay               1
}



###################
#    OBSERVERS    #
###################

include.control          publicationobserver
#degree, connectivity


control.coverage         spidercast.quickcluster.CoverageObserver
{
  protocol               vicinity
  from                   CYCLE
  step                   CYCLE
}

control.connectivity     spidercast.quickcluster.TopicConnectivityObserver
{
  protocol               vicinity
  from                   CYCLE
  step                   CYCLE
}

control.degree           spidercast.quickcluster.DegreeObserver
{
  protocol               vicinity
  from                   CYCLE
  step                   CYCLE
  #at                    1000
  undir
  method                 stats
  #FINAL
}

control.degree_std       peeremu.reports.DegreeStats
{
  protocol               cyclon
  from                   CYCLE
  step                   CYCLE
  #undir
  method                 stats
}

control.clustersstat     spidercast.quickcluster.TCDistributionObserver
{
  protocol               vicinity
  from                   CYCLE
  step                   CYCLE
  #at                    1000
  undir
  method                 stats
  type                   wcc
  #FINAL
}

control.clusters         spidercast.quickcluster.TopicConnectivityObserver
{
  protocol               vicinity
  from                   CYCLE
  step                   CYCLE
  #at                    1000
  undir
  method                 stats
  type                   wcc
  #FINAL
}

control.publicationobserver         spidercast.quickcluster.PublicationSender
{
  protocol               publishing
  routing                routing
  step                   5*CYCLE
}