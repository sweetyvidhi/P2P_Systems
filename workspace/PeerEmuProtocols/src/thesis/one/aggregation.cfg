NODES 							100
MAXNODES						NODES+100
#RANDOM_VIEW 					NODES-1			#Used without cyclon 
GROUPSIZE						3
CYCLON_VIEW						20				#Cyclon
CYCLON_GOSSIP					5				#Cyclon
TICKS_PER_ROUND					1000 * TICKS_PER_MSEC
TICKS_PER_MSEC                  1
X								0.05

ROUNDS							100

T_HBEAT							5
T_CALC							10
T_GOSSIP						15
T_CLEANUP						20
SUSP_THRESH						0.8
MSG_THRESH						20
					
random.seed						1234567890
simulation.endtime       		ROUNDS * TICKS_PER_ROUND
simulation.logtime       		5000
network.size 					NODES
network.maxSize 				MAXNODES		#Set it for churn	


#init.aggregation_init			peeremu.dynamics.WireKOut	#Used without cyclon
#{
#	protocol					aggregation_protocol
#	k							RANDOM_VIEW
#}

init.topology_cyclon     peeremu.dynamics.WireKOut			#Cyclon
{
  protocol               cyclon
  k                      CYCLON_VIEW
}

init.cd_cyclon			peeremu.edsim.CDScheduler			#Cyclon
{
	protocol					cyclon
}

init.cd_aggregation		 peeremu.edsim.CDScheduler
{
	protocol					aggregation_protocol
}

protocol.cyclon          gossip.protocol.CyclonED			#Cyclon
{
  				
  descriptor			 gossip.descriptor.DescriptorSimAge
  settings               gossip.protocol.CyclonSettings

  select                 gossip.comparator.AgeDescending
  duplicate              gossip.comparator.AgeAscending

  view                   CYCLON_VIEW
  gossip                 CYCLON_GOSSIP
  step                   TICKS_PER_ROUND

  transport              trans
}

protocol.aggregation_protocol	thesis.AggregationProtocol
{
	linkable					cyclon									#With cyclon
	descriptor			        gossip.descriptor.DescriptorSimAge		#With cyclon
	#descriptor					peeremu.core.DescriptorSim				#Without cyclon
	view						CYCLON_VIEW
	#view 						RANDOM_VIEW								#Without cyclon
	value						1
	size						NODES
	groupsize					GROUPSIZE
	time_gossip					T_GOSSIP
	time_broadcast				T_HBEAT
	time_cleanup				T_CLEANUP
	time_calc					T_CALC
	susp_thresh					SUSP_THRESH
	msg_thresh					MSG_THRESH
	transport					trans
	from 						10
	step						TICKS_PER_ROUND
	until						(ROUNDS-1)*TICKS_PER_ROUND
} 

protocol.trans					UniformRandomTransport
{
	#mindelay					0			
	#maxdelay					0
	mindelay					5 * TICKS_PER_MSEC			#Delayed experiments
	maxdelay					10 * TICKS_PER_MSEC		#Delayed experiments
}

control.group					thesis.GroupControl			#Grouping
{
	protocol					aggregation_protocol
	maxnodes					MAXNODES
	maxsize						6
	from						0
	step						TICKS_PER_ROUND
}

#control.dnet					peeremu.dynamics.DynamicNetwork		#Churn experiments
#{
#	add							X
#	substitute					
#	from						35
#	step 						TICKS_PER_ROUND
	#until						40*TICKS_PER_ROUND
	#at							2005
#	init.0 						peeremu.dynamics.RandNI		
#	{      
#		protocol 				cyclon
#		k						CYCLON_VIEW
#	}
#	
#	init.1						peeremu.edsim.CDScheduler
#	{	
#		protocol				aggregation_protocol
#	}
#}

#control.avg					thesis.AverageControl					#Mainly for experiment failure1(x% of nodes removed)
#{
#	protocol					aggregation_protocol
#	threshold					0.005
#	x							X
#	from						40
#	step						TICKS_PER_ROUND
	#until 						210*TICKS_PER_ROUND
#}