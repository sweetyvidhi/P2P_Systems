NODES						10
CYCLES						10
ROUNDTIME					500
INDEX						10

random.seed					789
simulation.endtime			ROUNDTIME*CYCLES
simulation.logtime			5000
network.size				NODES

#init.random_init			peeremu.dynamics.WireKOut
#{
#	protocol				chord_protocol
#	k						1
#}

init.initializer 			chord.ChordInitializer
{
	protocol				chord_protocol
	m						INDEX
}

protocol.chord_protocol		chord.ChordProtocol
{
	descriptor				ChordDescriptor
	m						INDEX
	transport				trans
	step				    ROUNDTIME
}

protocol.trans				UniformRandomTransport
{
	mindelay				0
	maxdelay				0
}

init.sch					peeremu.edsim.CDScheduler
{
	protocol				chord_protocol
	randstart
}

control.print				chord.PrintTopology
{
	protocol				chord_protocol
	at						(CYCLES-1)*ROUNDTIME
}


