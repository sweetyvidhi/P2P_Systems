NODES					8000
RANDOM_VIEW				NODES-1
TICKS_PER_MSEC					1
TICKS_PER_SECOND				1000
TICKS_PER_ROUND					1000
ROUNDS					100
EVALUATION				1
RANGE							1048576

random.seed				1234567890
simulation.endtime		ROUNDS * TICKS_PER_ROUND
simulation.logtime		ROUNDS * TICKS_PER_ROUND
network.size			NODES

CYCLON_VIEW						20				#Cyclon(default=20)
CYCLON_GOSSIP					5				#Cyclon

#init.kempe_init			peeremu.dynamics.WireKOut
#{
#	protocol			kempe_protocol
#	k					RANDOM_VIEW
#}

init.king_latencies		 peeremu.transport.MatrixParser
{
  file					/home/vidya/Desktop/vidhi/Academics/PDCS/Thesis/workspace/PeerEmuProtocols/king_matrix_connected
  ticks_per_sec			TICKS_PER_SECOND
  trace_ticks_per_sec	1000000
}

init.topology_cyclon     peeremu.dynamics.WireKOut			#Cyclon
{
  protocol               cyclon
  k                      CYCLON_VIEW
}

init.cd_cyclon			peeremu.edsim.CDScheduler			#Cyclon
{
	protocol			cyclon
}

protocol.cyclon          gossip.protocol.CyclonED			#Cyclon
{
  				
  descriptor			 gossip.descriptor.DescriptorSimAge
  settings               gossip.protocol.CyclonSettings

  select                 gossip.comparator.AgeDescending
  duplicate              gossip.comparator.AgeAscending

  view                   CYCLON_VIEW
  gossip                 CYCLON_GOSSIP
  step                   TICKS_PER_ROUND
  #at					 TICKS_PER_ROUND
  transport              trans
}

init.sch						peeremu.edsim.CDScheduler
{
	protocol					kempe_protocol
}

protocol.kempe_protocol			kempe.KempeProtocol
{
	linkable					cyclon									#With cyclon
	descriptor			        gossip.descriptor.DescriptorSimAge		#With cyclon
	view						CYCLON_VIEW
	#descriptor					peeremu.core.DescriptorSim
	#view						RANDOM_VIEW
	#value						1
	range						RANGE
	size						NODES
	transport					trans
	from						10
	step						TICKS_PER_ROUND
} 

protocol.trans					TransportEmu

#protocol.trans					UniformRandomTransport
#{
#	mindelay					0
#	maxdelay					0
#}

#control.print					kempe.PrintControl
#{
#	protocol					kempe_protocol
#	file						/home/vidya/Desktop/vidhi/Academics/PDCS/Thesis/graphs/aggout.dot
#	evaluation					EVALUATION
#	at							0
	
#}

#control.output					kempe.OutputControl
#{
#	protocol					kempe_protocol
#	evaluation 					EVALUATION
#	e							0.005
#	nodes						NODES
#	from						5
#	step 						TICKS_PER_ROUND
	
#}

control.stddev					kempe.StdDeviationControl
{
	protocol					kempe_protocol
	type						1				#1=Stddeviation,2=ConvergenceRatio 
	from						0
	step						TICKS_PER_ROUND
}